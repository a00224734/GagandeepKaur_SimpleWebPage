@page
@model GagandeepKaurA00224734_SimpleWebPage.Pages.BlogPostModel
@{
    ViewData["Title"] = "Blog Post";
}

<div class="text-center">
    <h1>Blog Post</h1>
</div>

<article>
    <section>
        <h6>Author: Ido Shamun</h6>
        <h6>Published Date: Oct 21,2020</h6>
    </section>
    <section>
        <header class="text-center">
            <h1>A Primer on the Different Types of Browser Storage</h1>
        </header>
        <p>In back-end development, storage is a common part of the job. Application data is stored in databases, files in object storage, transient data in caches… there are seemingly endless possibilities for storing any sort of data. But data storage isn’t limited only to the back end. The front end (the browser) is equipped with many options to store data as well. We can boost our application performance, save user preferences, keep the application state across multiple sessions, or even different computers, by utilizing this storage.</p>
        <p>In this article, we will go through the different possibilities to store data in the browser. We will cover three use cases for each method to grasp the pros and cons. In the end, you will be able to decide what storage is the best fit for your use case. So let’s start!</p>
    </section>
    <section>
        <h2>The localStorage API</h2>
        <p>localStorage is one of the most popular storage options in the browser and the go-to for many developers. The data is stored across sessions, never shared with the server, and is available for all pages under the same protocol and domain. Storage is limited to ~5MB.</p>
        <p>Surprisingly, the Google Chrome team doesn’t recommend using this option as it blocks the main thread and is not accessible to web workers and service workers. They launched an experiment, KV Storage, as a better version, but it was just a trial that doesn’t seem to have gone anywhere just yet.</p>
    </section>
    <section>
        <h2>The IndexedDB API</h2>
        <p>IndexedDB is a modern storage solution in the browser. It can store a significant amount of structured data — even files, and blobs. Like every database, IndexedDB indexes the data for running queries efficiently. It’s more complex to use IndexedDB. We have to create a database, tables, and use transactions.</p>
        <p>Compared to localStorage , IndexedDB requires a lot more code. In the examples, I use the native API with a Promise wrapper, but I highly recommend using third-party libraries to help you out. My recommendation is localForage because it uses the same localStorage API but implements it in a progressive enhancement manner, meaning if your browser supports IndexedDB, it will use it; and if not, it will fall back to localStorage.</p>
    </section>
    <section>
        <h2>Cache API</h2>
        <p>Cache API is a storage for the network level. It is used to cache network requests and their responses. The Cache API fits perfectly with service workers. A service worker can intercept every network request, and using the Cache API, it can easily cache both the requests. The service worker can also return an existing cache item as a network response instead of fetching it from the server. By doing so, you can reduce network load times and make your application work even when offline. Originally, it was created for service workers but in modern browsers the Cache API is available also in window, iframe, and worker contexts as-well. It’s a very powerful API that can improve drastically the application user experience.</p>
        <p>Just like IndexedDB the Cache API storage is not limited and you can store hundreds of megabytes and even more if you need to. The API is asynchronous so it will not block your main thread. And it’s accessible through the global property caches.</p>
    </section>
    <section>
        <p><b>Article Source: </b><a href="https://css-tricks.com/a-primer-on-the-different-types-of-browser-storage/">A Primer on the Different Types of Browser Storage</a></p>
    </section>
</article>